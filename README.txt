//SANDESH GOYAL
//183079026
//ASSIGNMENT 1 EE667
//MY SAT
//--------------------------------------------------------CONTENTS--------------------------------------------------
>>README.txt
>>"my_sat" folder
	>my_sat.c
	>test
	>cnf.txt
	>cnf1.txt
	>result.txt
>>"cnf2txt" FOLDER
	>cnf_to_txt.c
	>test
	>out.txt
	>uf20-01.cnf
//---------------------------------------------------INSTRUCTIONS TO USE--------------------------------------------
1. folder "my_sat" contains a 'c' code file which accepts ".txt" file as input with a specific format.
2. "result.txt" is the output file generated by the SAT solver which contains the output result of SAT.
3. "cnf.txt" and "cnf1.txt" are two test case files for which the SAT solver "my_sat" is tested.
4. CPU time taken by my_sat is also displayed on the console.
5. input format for my_sat
6. compile and run:
	gcc my_sat.c -o test -lm
	./test
--------------------------------------------------------------------------------------------------------------------
<variable_count> <clause_count>
<literal1> <literal2> . . . <literaln>       //clause1
<literal1> <literal2> . . . <literaln>			//clause2
.          .          . . . .
<literal1> <literal2> . . . <literaln>			//clause3
--------------------------------------------------------------------------------------------------------------------
more or less, standard SAT cnf format is used with some overheads removed.
--------------------------------------------------------------------------------------------------------------------
7. folder "cnf2txt" contains a 'c' code file which converts .cnf format file into the file format accepted by my_sat.
8. "uf20-01.cnf" is example test case file obtained from official test cases provided by SAT competetion organizers.
9. converted file is obtained as "out.txt"
10. compile and run:
	gcc cnf2txt.c -o test -lm
	./test
//-----------------------------------------------------IMPLEMENTATION-----------------------------------------------
1. assign 0 to all variables
2. assign 1 to all variables
3. assign 0 to all which are in only complemented form(marked)
4. assign 1 to all which are in only unomplemented form(marked)
5. again check for all 0(except marked)
6. again check for all 1(except marked)
7. guess in decreasing order of variable occurence
8. guess for 0/1 with/without mark
9. guess with proof, by satisfying some clauses(marked)
10. recursive learning of conflicts(under implementation, not included in this code)
n-SAT is standard, but the value of n was not specified(can be any value) for the assignment, therefore unit clause rule is only partially implemented
//--------------------------------------------------------IMPORTANT-------------------------------------------------
*marked : value of variable is fixed, reduces the number of unassigned variables, combinations for unmarked variables checked
**"my_sat" works with dynamic memory allocation and 32bit integer datatype.
**if number of variables are more than 32, then "my_sat" may mis-behave depending upon the combination check logic.
//
//
//
//
//
//
